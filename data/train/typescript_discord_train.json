{"ids": ["001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020", "021", "022", "023", "024", "025", "026", "027", "028", "029", "030", "031", "032", "033", "034", "035", "036", "037", "038", "039", "040", "041", "042", "043", "044", "045", "046", "047", "048", "049", "050", "051", "052", "053", "054", "055", "056", "057", "058", "059", "060", "061", "062", "063", "064", "065", "066", "067", "068", "069", "070", "071", "072", "073", "074", "075", "076", "077", "078", "079", "080", "081", "082", "083", "084", "085", "086", "087", "088", "089", "090", "091", "092", "093", "094", "095", "096", "097", "098", "099", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147"], "dialog": [["Hi guys! Could you help me please?", "you're inferring K  too soon  it works the way you want if you move the type parameter over:", "Thank you very much"], ["this piece of code perfectly works in js but not ts", "@Northern Star Code would be preferred over screenshots, and at the very least you're going to need to share the error message.", "ok well i got around the error still say it here\nclient.manager = new Manager({\n  // The nodes to connect to, optional if using default lavalink options\n  nodes,\n  // Method to send voice data to Discord\n  send: (id, payload) => {\n    const guild = client.guilds.cache.get(id) \n    // NOTE: FOR ERIS YOU NEED JSON.stringify() THE PAYLOAD\n    if (guild) guild.shard.send(payload) \n  }\n}) \n\nerror: https://i.imgur.com/1Z4TWX8.png\nfor some reason this code doesnt work in ts specifically "], ["I was wondering how I could get this example to work in typescript.", "this seems to work ok?\na bit ugly though\n(just copied the type from the <a>)\nactually it's probably better to use the Props that you defined...", "actually you might want this one since it type errors as expected", "Thank you so much!"], ["Hello\nHow to make a Fibonacci sequence in python where u give a number and the program gives every  other Fibonacci number that is less or equal to the number given\nFor example   x =23\nOutput \n0.1.1.2.3.5.8.12.20", "@Deleted User This isn't a Python server, you might try the python discord server, and don't ping people who you aren't already interacting with.", "Well then\nSo be it"], ["I have added Typescript to my Gatsby project and I am struggling with this error.\nThis is my github repo: https://github.com/adnanlah/gatsby-starter-newsletter", "That doesn't seem like a typescript error though.", "when I delete type module from package json I get this", "I have solved it. I implemented so many fixes at once and it worked: I changed module to commonjs and deleted type from package json and I deleted a plugin from gatsby-config that I removed from the project. Your input was helpful. Thank you so much."], ["Hi, I'm not suer if what I want is possible but I'm looking to call a method dynamically with type safety", "!ts actionMethod", "Ah amazing!\nThank you!"], ["how can i get all children and subchildren of an element?\nI tried using element.children but that returned an array with only the direct children", "element.querySelectorAll('*') might do it \n", "thanks"], ["https://www.typescriptlang.org/play#code/KYDwDg9gTgLgBMAdgVwLZwDIHkBKOCaA+gApYDKAKgJIByA4oQGK4CyhGAggEICiGZcAN4AoOGLgA1HgAkqAYQw9CAER4UOVfnAC8cAEQTgACwCWAYwA2wOMuAwAhiYsBnPQBpR4qbIVKK+Yh4dfUNTS2sKAE8wYD1hAF9hYVBIWAQUdGw8IlJKWgZmHDYqZSFPMW95RUIaAFUWXhxtPQA3Y3MrGjQAI2Aod3LJGSqlWmZmtrCrKkQAMwgB8SGfav9AifbwqJiBxOTwaHgzCERneAtoKEi5KGB7GBMTxmhUMhhgMGdggG1BkSWlvMoKgqAATABccAA5JMOsAuqhelAoR4AeIgagMPZehZIVkCCRyNR6ExWOxuHwyAA6Sq+FRqDT8VFouCzEzACyg5yQwSJJbxZlif4sjFgvG4Am5YkFMklGnDOljLCCgEYrE48XZQl5EmFNicXj8eUrJSqdSaMgqwHszncoR88QCv6DQEvMWYCU5In5UlFQhy2mrAI8K3ol7qjmayXe3Vkg2U40jQhrEMu9E2rk8h1iRIAXQA3EljqcIFYqRcAOYACguUCuNzuDyeLzeH2c3wADLmqaLQQBKTxAAThis works as expected \u261d\ufe0f\u261d\ufe0f\u261d\ufe0f\n\n\nI am working on a big project, and it causes a problem over there, it shows lorryCreationFormSteps[0] is possibly undefined but it works on the playground, the link posted above, so is it because of some tsConfig? If yes, can you tell me the property name?\nTS Playground - An online editor for exploring TypeScript and JavaS...\n\nThe Playground lets you write TypeScript or JavaScript online in a safe and sharable way.", "noUncheckedIndexedAccess", "Thanks, it worked!"], ["I have a function like this:\nlet foo = (words: string[]): string {}\n\nfoo returns any word from words.\nWhat I want is something like this:\nif I call foo(['a', 'b', 'c']), I want 'a' | 'b' | 'c' as the return type.\n\nIs there any way to do this? ", "!twoslash", "Thanks"], ["Can I use the pipe operator in typescript without babel? \nGitHub\nGitHub - tc39/proposal-pipeline-operator: A proposal for adding a u...\nA proposal for adding a useful pipe operator to JavaScript. - GitHub - tc39/proposal-pipeline-operator: A proposal for adding a useful pipe operator to JavaScript.", "No  the PR isn't merged yet", "Ok, thanks, than waiting for the next ts release \ud83d\ude42"], ["Hi is it possible to extract the type of a class constructor?", "Should it be done wit ConstructorParameters ?", "yeah.. u answered ur own question", "I figured out that built-in types afterwards! \n Thx Jakob"], ["Hi i have a ts question. Where can i look up documentation on Map. Did it get replaced by Record ?", "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map", "but the typings though?", "but the typings though?", "You can find the types for Map shipped inside typescript under 'lib' (files starting with 'es*.d.ts' - or you can ctrl/cmd click on Map to jump to them \n they are probably spread out over a few files depending on your tsconfig target", "danke"], ["Hey I want to get a data set attribute value from an array of elements with the same class ? \n ", "Here is the playground of my problem", "The problem is typescript think its not a  \n HTMLElement \n . I know to place a type assertion, but how would I go about doing that.", "I think I figured it out"], ["how can I fix this error with type unknown when accessing a json response from an API? \n ", "!screenshot", "but that said, (json as any) will let you do whatever you want with json ", "        return fetch(url) \n         .then((response) => response.json()) \n          .then((json) => json.result.photos) ", "but it's really about you assigning a type to your json", "can I just assign it any? \n how would I do that", "yep,that was my example above", "ohh I didn't realize that was an example. thank you!"], ["How can I render { function and <div> </div>} in ts", "its not clear what you mean \n if your question is how can I use jsx in .ts files, then the answer is you cannot \n you can only use jsx in .tsx files", "Okay I gotcha Michael.... Thanks for your help \u263a\ufe0f \n ! Close"], ["does typescript have a walrus operator ", "the syntax I want would work like  \n if (num := Math.random() > 0.5) console.log(num) \n := stores the value to num which is initialized as a variable \n for whatever the context \n instead of :=, is there something that does this?", "You could hack it with a for loop... \n for (let num = Math.random() > 0.5  num  num = false as never) { \n     console.log(num) \n } \n but no, TS just follows the standards track for JS these days", "thanks \n !close"], ["I have an issue with narrowing based on sub property this playground shows the issue I'm running into: ", "TS doesn't do 'deep' narrowing like that.  When you check obj.sub.type it narrows obj.sub but doesn't narrow obj itself. \n You could write a custom type predicate for it if you wanted. ", "ust out of curiosity is there an issue ticket related to this on the github? ", "Not sure, probably one somewhere."], ["how do I swap 2 elements in an array, also wtf is this bug", "swhen I tried \n let elements: number[] = [1,2,3,4] \n [elements[0], elements[3]] = [elements[3], elements[0]] \n I got \n wtf happen there \n also I got no clue what's going on here ", "You can fix it with \n let elements: number[] = [1,2,3,4] \n  [elements[0], elements[3]] = [elements[3], elements[0]] \n Essentially, JS parses that as \n let elements: number[] = [1,2,3,4] \n [elements[0], elements[3]] = [elements[3], elements[0]] \n Which is nonsense \n So you need to explicitly but a semicolon in there to tell JS its two separate statements", "ah that makes sense \n tyty \n !close"], ["quick question, whats the syntax for a type definition of an object that only holds a certain type of key and value", "so like an object with string keys and number values, or an object with number keys and boolean values", "Like Record<string, number>?", "oh is that it", "And Record<number, boolean>", "thanks"], ["can some one help me why the  caption  type is not detected?", "here is the types \n ", "no idea what the full type is  \n but one issue may be the fact that not every type in the union has the caption property \n (not sure whether that's true though) \n so you cannot be sure every AnyMediaMessageContent has the caption property", "how you'd fix this specific case would be to do: if ('caption' in content) {} \n but... yea idk... might help if you could make a MCVE on the playground", "okay thankss"], ["Hi, I have a type type abc = number | string, how can I make abc into just a string type?", "!title removing types from a union type", "Exclude<abc, number>? Or Extract<abc, string>", "thanks \n !ckise\n !close"], ["is this a limitation of typescript?\n type StringNeeded<S extends string> = S \n type AreBothString<T, U> =\n T extends (U extends string ? string : never)\n ? StringNeeded<U> \n //                ^ Type 'U' does not satisfy the constraint 'string'. ts(2344)\n : never", "Yup\n That\u2019s borderline nonsensical\n Just write it with two nested conditionals", "ok, thanks\n !close", "type A<T extends string, U extends string> = [T, U] \n maybe???\n whats the type intended to be used for anyway\n type B<T, U> = [T, U] extends [string, string] ? [T, U] : [never, never]!"], ["what's the difference between the typings of x and x.prototype in this case? i can't pass x itself into a function (although the code runs with a ts-ignore), but passing in x.prototype makes the types work but the code doesnt?", "!title class vs class.prototype in typings issue", "There's a difference between the type of a class itself (the constructor) and the type of instances of the class", "oh okay, thanks @nw!", "!close"], ["how can I do this in typescript? https://willf.dev/Code_G1V5L3PL5L.png", "!title dynamic import?", "That code looks like it already is TS and I can't see any errors, so what exactly are you asking? \n If you are asking how to do dynamic imports with ES modules, there's a function-like syntax for import which returns a Promise: const module = await import('moduleName') ", "when I do await import('file') it throws error saying cannot use import statement outside a module", "that seems like you're using commonjs modules, in which case require is the way to go \n so again, what is your question?", "!close"], ["I'm trying to distribute a union type:", "You want to use P (which is the individual key), not T (the set of all keys), so Lowercase<P> is the fix", "that was it, thank you so much!\n !close"], ["What project can I work on? I have a solid understanding of TS/JS, and I've worked on a few discord.js bots in the past", "!title what to do", "has a lot of projects others have done that might provide some inspiration - I always say whatever catches your interest", "!close"], ["hello, everyone, I want to know how to type function return type which has dynamic member inside, for example:\n const createFunc = (funcName: string) => {\n const methods = {\n [funcName]: () => {},\n  } \n  return methods \n }\n const a = createFunc('testFunc') \n a.testFunc\n // ~~~~~~~ how can I make 'a' has 'testFunc' member typed?\n Thank you!", "It doesn't error for me @ShanaAE. What kind of type do you want?", "This is slightly better because it prevents you to access any other property other than testFunc", "Thank you for your help!  It's definitely what I want! Thanks a lot!\n !close"], ["!title Unexpected token /", "i keep getting that error while im trying to parse\n and i dont know the cause or what im doing wrong", "What's your tsconfig?", "What are you using to parse this file? \n comments are not standard JSON, so you can't parse it with JSON.parse", "You can't do that, because JSON.parse doesn't understand comments", "so what can i do to get the bot working", "Why do you need to parse it?\n You need another parser like jsonc", "beware that the parser will also need to support trailing commas, in addition to comments", "i got it\n it works now\n !close"], ["what does this mean", "subNav?: {\nicon: string \ntitle: string \n url: string \n }[] \n the array at the end", "It's an array of objects with that shape", "thanks\n !close"], ["A defined value is undefined on return \nfrom calling function\n console.log(int, `return is: ` + this.calculateLevel(int))\n from returning function this.calculateLevel(int)\n console.log(`This console.log is here to show that ${int} should return ${m - 1}`)\n return m - 1 \n OUTPUT: \n This console.log is here to show that 7637 should return 36\n 7637 return is: undefined", "!title defined number is being returned undefined", "@Acier if you can post the whole example, that would be useful", "Just running the function again if it returns undefined somehow magically returns the correct value\n !close"], ["Hi, i don't know how type my argument, is somebody knows please?", "You should create separate type or interface for valueArray element and type param as ValueArrayElement[] \n You get the error since you said that param will be array of objects with only numeric fields, but you have string field displayFiscal ", "Ok, i had try something but it doesn't work, maybe it'll be beter here for see my issu \n https://stackblitz.com/edit/typescript-n5c3kk", "Thanks", "I kind of got it to work.. check it out.\n replacing myType with generic T works too."], ["If I am making a class that is a base to be extended, how can I it so some function can't be overridden in the class that extends the base\n Example:\n class Base {\n  someFunction() {}\n }\n class Thing extends Base {\n // I need TS to error here to stop it being overridden\n someFunction() {}\n }", "!title Overriding class functions", " you want to add the noImplicitOverride flag to your tsconfig file\n https://www.typescriptlang.org/tsconfig#noImplicitOverride", "thanks :D\n !close"], ["trivial question but what is the ? after a variable:\n variable?.method()", "http://developer.mozilla.org/en\n US/docs/Web/JavaScript/Reference/Operators/Optional_chaining", "thanks\n !close"], ["Is there a way to indicate T[K] is an object to use this kind of notation?", "ok? ", " Here's a shortened URL of your playground link! You can remove the full link from your message.", "thanks!\n !close"], ["!title Generics - Function to get enum values", "magic\n Can you explain what T[keyof T][] is?\n Well, it's clearer as Array<T[keyof T]>\n But I don't understand the T[keyof T] part specifically", "Yeah, sorry, the Array<> bit helps.\n The T[keyof T] is basically a way of using index types to get the values of an indexable object.\n In this case, it works because the type system implicitly lifts the type of the enum up to be typeof MyEnum (which is why you saw typeof MyEnum in the original output), and when you do typeof MyEnum[keyof typeof MyEnum], TS special-cases it to resolve it back to just being MyEnum.", "Thank you very much Chris, i appreciate the help.\n !close", "You can do the same basic thing with a regular object, but in that case it just gives you the values as a union. "], ["When I do\n try {\n  ...\n } catch (e) {\n ...\n }\n How can I make it so it knows that e is of type Error? I've tried e as Error, but it doesn't seem to work.", "Also, can e ever not be of type Error?", "you can only type e as any or unknown. you need to use instanceof or a type predicate", "So can e ever be something that is not or doesn't extend Error?", "You really shouldn't in practice - it's considered best practice to only throw Error and its subtypes, but it's not necessary.\n Nowadays, I use this helper:"], ["Weird typescript error ", "checking ctx.guildId doesn't narrow ctx (unless it's a discriminated union and guildId is the discriminator)\n this works:", "ty\n !close"], ["Hello, I get error from node_modules even though it is excluded.", "I searched it in stackoverflow and git, sadly I could not find the solution \n !title error from node_modules even though it is excluded.", "Excluded files are still looked at by the typechecker if they're referenced by another file", "Then what can I do?\n I mean is there any way to prevent errors?\n Because they are not related to my code", "Do you have the error in text?  That picture is a no-go on phones", "Oh will send you that today", "!close"], ["Can I import a json file in ECMAScript syntax?", "Ok thank you\n !title  Use ECMAScript import syntax for JSON files ", "@Sparkles& Are you using native ES Modules?\n Are you in Node, or browser?", "In node", "You need to use the --experimental-json-modules flag\n I think 16.14 had the import assertions unflagged", "Any ways to automate that?", "For the compiler or node?", "Node", "?", "What do you mean? Automate which part?", "Adding the long flag", "ou are encouraged to never directly call node anyways \n For example, you can use the scripts field in package.json", "Hmm... and make npm run that... I did not know that Thanks"], ["can I use an enum values delcared in a .tsx file form a .js file?", "Yep. It\u2019s just a normal(ish) object you can import and use.", "oh i see, that simple, thanks \ud83d\ude42\n !close"], ["<Image source={{ uri: item }} style={styles.image} />", "!title hi im new to tsx im using react native why is this throwing a error looks legal to me", "What error are you getting?", "Can you share an example of how you're using that component in a playground? ", "!close"], ["this is Javascript code that I want to turn into Typescript code\n error : Parameter 'xxx' implicitly has an 'any' type.\n question : easy solution is to add bunch of: any, but are there any prettier ways ?", "How is column defined, what's its type?", "also just :any", "Yeah, that's the problem.\n If you provide a type for columns, the rest of the code should be typed without needing extra annotations.", "understandable, thank you.\n I think i should close this.\n !close"], ["Good evening, I don't understand this error", "Are you importing something called Promise that isn't the native Promise implementation?", "Thank you, it was you talking and looking how the fact was importing Prom. mongodb, thank you very much\n And the first time I post a question, do I ever thank you for the answer or rate it more", "If you mention (or reply to) someone when thanking them the bot will\n automatically give them a rep point.  (Though it's not really a big deal)\n The more important thing is !close when you're done with the thread.", "Ok thanks, !close\n !close"], ["Hi, I'm having trouble with Promises, it's not Typescript related as it's for an exercise that only uses Javascript \n (Node+Express+Mongoose+Mocha), could anyone point me to a channel or server where someone might be able to \n help me?", "!title Promises are timing out in Mocha", "You might check out Reactiflux or Nodiflux from \u2060directory \n Reactiflux is technically react focused, but they have a lot of non-react channels, including #testing which migh \n be relevant if it's mocha specific.", "Thank you, I just joined Nodiflux. Will join Reactiflux as well. \n !close"], ["What's the current consensus on whether we should use type or interface for props?", "!title type vs interface for props", "I generally say  type for apps, interface for libraries . \n So generally type for props.  But it's a pretty small distinction either way.", "Thanks. Leaving this open in case there are more opinions.", "!close"], ["Hello , I have a function builddefs that returns a function handlerRequest  \n builddefs is only useful during development and I need to deploy handleRequest. Thus can ts give a seperate  \n file containing only handleRequest and its dependencies", "!title compile time functions", "@Monarch No. TS is not a bundler, so it only strictly transforms whatever you write in TS into vanilla JS.", "So its not possible to save a pure function as a standalone file ?", "!help", "!close"], ["Hi, I get an error No overload matches this call. What exactly is an overload (in TypeScript) and is there any \n Info (on an official TypeScript Documentation)?", "Overload mean a function has multiple ways to execute based of number and type of arguments passed \n No overload matches mean the arguments you passed to the function call does not meet any function definition", "Very clear answer, thank you!", "!close"], ["I'm trying to install typescript, but I get a huge error in command prompt", "!title error when trying to install typescript", "Your npm installation looks like it has a problem. Can you install other packages?", "No, everything seems to give the same error", "That strange, I would try to rename the npm directory in C:/Users/shows/AppData/Roaming/npm/node_modules  \n restart the console and try again \n If it really doesn't want to work then you may have to reinstall NodeJS on your system", "Ill give that a try. I've uninstalled Node and rebooted a few times already, same issue persists", "I believe it's because it's not the npm that comes with Node that fails, it's one you installed on top \n That why I believe that renaming the directory (or just remove it) would force your system to use the one shipped  \n with node \n (Path priority in your env variables)", "that did it sir, thank you very much \n !close"], ["Hello. I have property of type string[] and I am using \n isArrayTypeNode(typeChecker.getTypeFromTypeNode(property.valueDeclaration.type) to check if it is array type \n node. But how do I check exact type of array? I want to skip all properties that are of literal array type (string, \n boolean, number)", "You want the type arguments of the type, checker.getTypeArguments", "So I receive array of Type[] with one element. That element has property flag: 4 which means string and  \n intrisicName: 'string'  \n Now I use typeChecker.typeToString method to extract name and get 'string' as result, but is this good approach?", "!close"], ["why im getting error if i do guild.id or guild", "!title type help", "what error", "cannot be assigned type string | IGuild to a string parameter of type IGuild cannot be assigned to a string \n first ss \n id property does not exist in type string | Guild the id property not an instance in a string \n second \n @Ascor", "@livelove You'll probably need to do something like: \n (... though it's kind of weird you'd accept an entire guild object on a field called GuildId)", "uhh thx \n so i cna not do this by interface?", "I'm not sure what you mean.", "like edit something in my interface to get same result", "You could change IOffense to only accept strings, rather than string | Guild. \n Then you wouldn't need this logic to handle the case where it could be a Guild object.", "uh , oki", "!close"], ["Hi is it possible to create an enum from an Union Type ?", "nope, using enums is discouraged these days \n they have idiosyncracies that dont match the rest of the language \n best practice is just to use unions", "We are using a lib who accepts enum so unfortunately I need to stick to it ", "(It's just impossible by principle, because enums have value emit but unions are just type-level)", "an enum is not a type, though", "That's very unfortunate. You should probably send a typing fix to allow literals as well.", "enum is a syntax for making unions and dictionaries", "In the worst case, you need to create an enum yourself or import their enum", "what library? You can probably do it manually, but better \n (an example would help, now)", "It\u2019s an internal design system. The options for a Tooltip needs to be an enum (Top, Bottom, TopRight etc )", "If the lib is actively updated, I suggest their types be fixed first", "Makes sense \n Thanks a lot @Chen Sida and @\ud835\udea0\ud835\ude8e\ud835\ude8b\ud835\ude9c\u030a\ud835\ude9d\ud835\ude9b\u030a\ud835\ude8a\ud835\ude97\ud835\ude8d I will follow your suggestion"], ["Hi everyone. This wiki is confirming to me that PascalCase is indeed the best name convention for an interface. is \n that true in general? \n and also is it correct to name the file directory-configuration.ts?", "!title Interface naming convention and filename naming convention for angular application", "Yes, interfaces (and types in general) are conventionally pascal-cased \n Naming of files varies \n I would personally name the file DirectoryConfiguration.ts", "Thank you so much. \n That confirms what the dev did in the other project. I will rename the file."], ["Hey friends, why does this work fine \n but this doesn't \n the error message says \n I don't get it, from my point of view nothing really changed, provider was Worker | ChildProcess, now it's T, \n but T is Worker | ChildProcess", "!title Generic as Union type and Type guard issue", "@Chaz Ashley in your second example provider is not of type Worker | ChildProcess \n which it needs to be to use provider is Worker", "do you mean that extends means that it can have props of Worker or ChildProcess but also can have more props,  \n so it extends Worker or ChildProcess, but not exactly Worker or ChildProcess ? @funki", "yes, with this T you can only say that provider is Foo where type Foo = Something extends Worker |  \n ChildProcess", "i c, thanks", "the type decision you make must also extend from the types you have above", "oh, i c, thanks again"], ["Silly question, how do I type the status property here?", "you have to declare it as a class property, like so:", "you can alternatively use this shorthand and not have to set it at all:", "Thanks a lot!"], ["Hello. How do I check if a variable is of an enum type in a typeguard? For example:", "@terainferno Could do:", "thanks"], ["I have this interface \n Since due date can be an an string or date i tried doing this but im not getting the getMonth property when forcing  \n it as a date like this  \n I created t just to test but also didnt work", "I think the problem with your code is that <Date> isn't  casting  as that in C/C++, but more as a type hint for IDE,  \n etc. \n so instead of <Date> a string, try \n forgot quotation marks", "ill give it a try", "this would force date as a Date, I need it a string or date \n The code you send me would break timeLeft since Date and string have no overlap \n I did use your fix tho with new Date that is what I needed \n Thank you!"], ["How to limit O to the properties of the I here? I want something like this:", "@BananaEnergy I extends O, O \n There isn't a super now, so you can only do it this way... \nh Or I, O extends Partial<I>", "Thanks!"], ["getting the error TS2339: Property 'textWidth' does not exist on type 'typeof  \n import( /path/to/libraries/d3plus )'. the import looks like \n and the line in question is just a call of .textWidth \n it was working when the file had extension .jsx", "!title strange import error", "changing the import to  \n  did not work", "@space cowgirl your issue might be related to  \n try d3plus.default.textWidth \n (or change the tsconfig setting)", "thank you!"], ["In my tsconfig.json, how do I disable the erroring on variables with an any type?", "!title Disable Errors for vars with type of any", "@hallel You can disable noImplicitAny (... but it'd probably be better to give them a type)", "The thing is, idk what type to set them as.", "For the most part, it just depends on how you use them. \n I'd guess:", "Thank you", "I'm getting this error here. \n Button.tsx: \n Navbar.tsx: \n I'm looking through the code and I don't really see what could be causing this error besides it being tsx and not jsx \n Nvm I fixed it heh ty"], ["Why is it that when I declare type DocumentRecord<K extends string, T> = { [P in K]?: T } and type \n MyDocRecord<U extends DocumentRecord<string, unknown>> = { field?: keyof U  }. Typescript (4.6.2)  \n doesn't seem to know that field is a string. It still thinks it could be a string | number | symbol", "!title recognizing keyof as only a string", "@tettoffensive Could you give a playground example?", "This seems to work", "Here's a more specific use case:"], ["Is it possible to type a js method so that it emits a type with a string generic? \n i.e. function test(name: string): MyType<name> so that it creates the following types when the function is  \n called:", "function test<Name extends string>(name: Name): MyType<Name>", "Ah, of course. I did not consider using a generic there. Thank you so much "], ["Is this supposed to work?", "I can't see any obvious reasons why it shouldn't work", "Type 'ComponentType<Props>' is not assignable to type 'ComponentType<object>'.", "Uh, I think I see it now. ComponentType is contravariant. \n Thanks @nw"], ["A final noteworthy difference is that when checking against a target intersection type, every constituent is checked  \n before checking against the  effective / flattened  type.", "explain the above sentence to me", "Every message at the top level in \u2060help-threads is for a question, and automatically gets its own thread.", "Oh \n Do you explain the sentence  please", "Oh. I thought you were answering someone's question and  the above sentence  was talking about the message \n from the bot, lol. Where is the sentence from?", "it is from typescript \n sry for the delay @smichel17  \n Understood"], ["hi, is there a function that debug typescript error from string without saving the TS code to a file? \n for example:", "You could look at creating a program, then createSourceFile, don't have time right now to give a full example. ts- \n morph has an example in its docs I think", "Is there a way to debug without using the createSourceFile"], ["Hello frens, I'm developing a backend in typescript with express but I want to be able to check if the structure of  \n input whether it is the params, the body or an object I compose before passing it to my use cases, corresponds to a  \n defined type or class", "at runtime \n so I can throw an exception if the client sent an invalid request, is there a way to leverage typescript type/class  \n definitions to do such thing at runtime?", "there is but is no different from manual runtime type checking \n it has a plus with type-guards in typescript but there's nothing new under the sky \n you maybe wanna check out data validation librarys such as Joi, Yup... \n maybe you can give a try to my own implementation https://www.npmjs.com/package/@srhenry/type-utils, it's up  \n to you ", "thankyou, I will check it out"], ["hello i am looking into how to properly type a tuple returned from a lookup function when i pass an array of keys \n to a known object. in this example i want x: number and y: string rather than them both being of type number  \n | string", "!title typed tuple / array based on values of provided object keys", "Array.map doesn't preserve tuples types. see https://github.com/microsoft/TypeScript/issues/29841 ", "if you're willing to use a type assertion, this works:", "yeah, happy with an assertion - thanks "], ["How do I properly escape */ in a block comment, so that it works in the JSDoc tooltip?", "Content is like A glob pattern like  **/*.md . Not sure if this is a TS bug", " @Chen Sida Doesn't seem like there's such a thing: https://github.com/jsdoc/jsdoc/issues/821 \n The best suggestion in there is to use a zero-width joiner character", "Heh, I see. Good to know that I'm not insane. Thanks!"], ["In my react app, in index.html file, I'm using this https://cdnjs.com/libraries/marked cdn.\nBut I can't use it in my app. \n<head>\n...\n<script src= https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.2/marked.min.js  integrity= sha512-hzyXu3u+VDu/7vpPjRKFp9w33Idx7pWWNazPm+aCMRu26yZXFCby1gn1JxevVv3LDwnSbyKrvLo3JNdi4Qx1ww==  crossorigin= anonymous  referrerpolicy= no-referrer ></script>\n....\n</head>\nWhen I'm doing,\nmarked.setOptions({ \nbreak: true \n}) \nin App.tsx\nI get - \nTS2304: Cannot find name 'marked'.\ncdnjs\nmarked - Libraries - cdnjs - The #1 free and open source CDN built ...\nA markdown parser built for speed - Simple. Fast. Reliable. Content delivery at its finest. cdnjs is a free and open-source CDN service trusted by over 12.5% of all websites, serving over 200 billion requests each month, powered by Cloudflare. We make it faster and easier to load library files on your websites.", "Why you don't want to use it without cdn?..\nyou can still try something like\nimport { marked } from  marked  \ndeclare global {\n  interface Window {\n    marked: typeof marked \n  }\n}\nbut it makes little sense", "@Dmitry Olyenyov Solved. It was version problem.\n!solved\n!close"], ["What I want to do is to send data from ShowMe to Websocket and keep it there. How do I do this?", "We need a bit more context, what Websocket are you trying to utilize and are you using an external library to connect it?", "https://github.com/TooTallNate/Java-WebSocket/wiki\nGitHub\nHome \u00b7 TooTallNate/Java-WebSocket Wiki\nA barebones WebSocket client and server implementation written in 100% Java. - Home \u00b7 TooTallNate/Java-WebSocket Wiki\nHome \u00b7 TooTallNate/Java-WebSocket Wiki\nI am using the codes in the wiki section at this github address"], ["For some reason this is not working. I am creating a java tile map game where the player kills/capture a ghost and once the player has the ghost it will be able to deposit the breach from where the ghosts come from. I have tried separating the two bottom if statements but that doesn't work also. I have tried anything I can think of and I need help please.", "There are also no errors that come with the code. According to the compiler, it looks correct but it doesnt do anything", "Use a debugger", "true"], ["How do i change the color of a font in a JTextArea", "d  JTextArea#setFont", "The background color of the text area is gray and i can barely see text so i want to make the font white", "That doesn't change the color of the font", " It does\nyou can set a font", "Yes", "which also has a color attribute", " Where", "oh nvm\nafter one search\nd  jtextArea#setForeground ", "this does it\nmy bad", "So JTextArea#setForeground?", "yes", "Thank"], ["How could i achieve syntax highlighting in a JTextArea?", "Have a look at this maybe https://sourceforge.net/projects/jintilla/ \nSourceForge\nJintilla - Source Editing Control\nDownload Jintilla - Source Editing Control for free. Java SWT and AWT port of Scintilla, a free source code editing component. Scintilla runs on Windows and Linux with GTK+.", "\ud83e\udd28\nI was thinking of a plain java solution", " then you can have fun manually highlighting stuff", "Oh dear", "is tahomuk no longer active? Cuz he was the guy who kickstarted my Java career", "Did you mean to write this in \u2060general? ", " Lol", "Yeah mb", "Lol", "Thank you, i had a lot of fun \u2764\ufe0f"], ["@Andrew I'm so sorry to keep bothering you but I've looked around for a while and determined that both variables need to be static finals... in separate files. Is there a way I can ensure that one initializes first?", "I think you could just not initialize them locally within their own file, but initialize them both in some common static block in a class which is loaded at runtime before those would normally be loaded", "The issue is I can't have them in a common class because it's a library so one variable would be in a different jar file entirely than the other", "then I don't think it's possible to do what you want", "aw, that's a shame", "I can play this game", "so can I \n i need helppp \n i got another idea", " d String", "whoa \n what \n thats cool", "so available help channels wont accept messages to send messages people have to use something like /help then describe the issue", "d BigDecimal", "wo", "lol", "d andrew"], ["git push heroku main doesnt work to deploy my app", "\u56fe\u7247", "Maybe try master instead of main?", "@ed git remote -v \ndo you have a remote named heroku?", "  ImageIO.read(getClass().getResourceAsStream( filepathhere ))    retuns null\nhelp", "There's probably no file with that name in your classpath\nBy the way, you hijacked someone's else channel", "oh sorryu", "It's a bad thing", "how do i get my own?", "\u2060help-medici  for example", "how do i get that?\nalso i cant test anything till a few hours\nim just trying to keep this reserved"], ["hi, so I am doing this exercise and need help with it if anyone understands it please \u56fe\u7247", "like would a) be 0-3?", "Yes", "then with the same logic, b and c should be 0-3 and 0-4?", "yes", "lastly, how would i do d? like 000? im a little confused", "No", " [4][5][4]", "for the amount of levels, rows and columns right?", "Yes", "ok thank you"], ["yes apparently i already tried redoing git remote -v", "git remote -v doesn't do anything, just gives me information lol", "o\nk\ndo i switch from master to main", "yeah your project probably generated a master branch\ncan run git branch\nto see local branches", "it only shows master\nKemikals \u2014 2021/12/29 08:25\nthere ya go \ud83d\ude42\nso master, not main", "how do i switch ittt\no\nu mean do\ngit push heroku master\nit worok\nwoo", "alr ill go from there thx"], ["How do i change a part of a string knowing the location. E.g. change the 3rd character in a string to a '%'?", "Because i know the .replace uses like if i want to replace the characters 'p' with characters 'z' for example", "https://www.techiedelight.com/replace-character-specific-index-java-string/ \nTechie Delight\nAdmin\nReplace a character at a specific index in a String in Java \u2013 Techi...\nStrings are immutable in Java, i.e., we cannot change their values after they are created. This post will discuss how to replace a character at a specific index in a Java String.", "Thanks thats it", "and don't dare using option 4", "Ok"], ["Hey there im struggling with JAVAFX ,so im trying to load this one website and login ,but the login is a popup login, but its not loading, what can i do to make it work?", "Do you use WebView?\nIf you do, https://stackoverflow.com/a/16372083/10871900 might help you\nStack Overflow\nwebview not opening the popup window in javafx\nI am trying to open a webpage in webview using javafx . This webpage opens a new popup window when click on a hyperlink\n How can i open the new popup , when trying to open the same web page in de...", "thanks lemme check this out"], ["Hello, got a question about Gradle files and Git. Have no experience with Java, but I'm doing a beginner Java + Angular project test exercise.\nDo you push .gradle folder files to repo every time or are these only meant to be used locally? \nThanks ", "\u56fe\u7247", "the latter\ndont push them to ur repo\nHalund \u2014 2021/12/30 00:37\nSo I can just gitignore the whole .gradle folder?", "yup", "Ok, thank you very much \ud83d\ude42"], ["sorry for ping, but forgot to ask u, how would I list multiple roles", "?", "How do I list multipled roles to be able to use that command\nlike\n\u56fe\u7247\nI want to have multiple staff roles to be able to use it", "- type: ROLE\n  id: role1\n- type: ROLE\n  id: role2\nor lile\ntype: ROLE\nid: [role1, role2, role3]\nbtw if you use code from Java-Discord/JavaBot, you need to pay respect to the license\nthat means you need to make your project GPLv3 if you use code from JavaBot \n(if you provide binaries/source code somewhere) ", "ok ok\nI am using it as reference. But I will code 99.7% of it myself. Also look it up. I will respect it too lmao\nI am using it for my mc server so ye\nty"], ["Hi, is it possible to run a code made in Netbeans on a similar sw?", "What do you mean?\nPackaged Java application will run on every computer with compatible JRE\nOr you embed JRE with your application\nBut then you need to build separate binaries for Windows, Linux, Mac OS etc.", "@szatkus I mean like\nIf to say I made a program with netbeans\ncan I run it on another editor?", "Yes, use Maven or Gradle", "okay thx!"], ["Hello everyone, is  it possible to get something like this, where I am able to create each key-val pair from interface\ninterface Hello {\n  a: string \n  b: number \n  c: boolean \n}\n// Can I get this from `Hello` interface\ntype EachFromHello = {a: string } | {b: number } | {c: boolean}"], ["I need help picking out and defining which is the generic type in this code. Normally I see T but I'm kind of new to knowing where it is identified at. Is Food what we would normally replace with T, a generic type?\ninterface AnyFoodConstructor<Food extends Vegetable> {\nnew (name: string): Food \n  cookingTimeSeconds: number \n  cook(food: Food): void \n}", "yes, Food is the generic type here\nit's not required to have a single letter for a type parameter\nTypeScript", "Thank you!"], ["How to allow empty folders to be compiled with typescript?", "^^ Ping me.", "pretty sure tsc doesn't do this, the same way it will not copy non-compiled files, such as markdown files.  If the question is about how to tell tsc to create empty folders in outDir corresponding to empty folders in rootDir, then the answer is that it will not do that", "Aw.\nAnyways, thank you!\n!close"], ["idk if this is the right place, but any way to make vscode auto import type declarations with import type by default?", "@iDarkLightning I'm not sure if there's a config for changing it directly, but it appears that the import behavior changes based on importsNotUsedAsValues in your tsconfig.\nIf you have it set to error, it'll import with type by default.", "ah nice, thanks!"], ["hello everyone. I have but I can't make it work passing the check. \ntype Base = {isGroup: true | undefined} \ntype Info = Base & (Base extends {isGroup: true} \n    ? {groupName: string} \n    : {itemName: string}) \nconst t: Info = {isGroup: true, groupName: 'sdfsdf'} \nIs there a way to do it without generic?\nHere's the playground"], ["Hi ! \nWhy is the exhaustiveness checking derailed by the constrained generic parameter in foo ?\nIs there a way to get the same effect as fooWithDefaultCase without the default : throw and the assertion on each return statement ?\nThanks ! ", "generics just Don't Work\u2122\ufe0f with narrowing\nunfortunately i think the best option here is overloads\nwhich bypass the typechecker somewhat but i think there's no better option", "thanks !! that'll do \ud83d\ude42"], ["how do you check if a value is of a certain type..\nif (typeof templateData === ITemplate) console.log( huh ) ", "a certain typescript type?", "You need to make a custom type predicate, because types don't exist at runtime\nfunction isTemplate(data: unknown): data is ITemplate {\n  // Your check\n}\nif (isTemplate(templateData)) ...", "ok thanks ill give this a try", "(sidenote) if the type in question is a primitive or a class, you can use typeof or instanceof respectively (and === for undefined and null and primitive literal* types) ", "*primitive literal types, not const types", "thanks"], ["how I can flip card on click? I made a hover But I want by clicking it to stay upside down", "this doesn't sound like a typescript question (maybe CSS?). you might have better luck asking on a different server (and providing more details)", "yes How can I do this in css", "\u2060help-threads is for typescript questions, not CSS questions, so you probably won't get a good answer here. if you provide more information about what you are trying to do you might \n get lucky, but you would probably have even more luck if you ask your question on a  server focused on CSS/general frontend web development", "kk ty\n !close"], ["Hi, can someone help me with the package Cliffy on Deno? I'm using it but I don't know how can I check if a certain answer is checked when I use the Checkbox prompt\n Something like if the answer1 is checked, then do something", "how are you using it currently?\n const checked = await Checkbox.prompt({ options: ['a', 'b', 'c']  }) \n if (checked.includes('a')) {\n  doStuff() \n }\nmaybe?", "I will have access to my code in a few hours only but if I remember correctly I think it's more like :\n const checked: string = await Checkbox.prompt({\n message: 'a message',\n  options: ['option1', 'option2'],\n }) \n if (checked.options == option1) {\n doStuff() \n }", "\u2060But I know that my code doesn't work. You think includes can do the job?", "idk\n didnt u say u were using Checkbox", "Oh\n Yeah my bad, because I'm on mobile so I did a ctrl c / ctrl v ", "im surprised that typechecks\n https://deno.land/x/cliffy@v0.24.0/prompt/checkbox.ts#L69\nbecause prompt() returns a Promise<string[]>\n so it should type error when you try to ===...\n ... maybe it's because you're using ==", "Is there a big difference between == and ===?", "== coerces the arguments", "1 == '1'\n false == ''", "Ohh", "yeah, basically == is  if you squint a little, are they equal \n probably recommended to use === and !== always, in typescript", " null == undefined", "I'll start to put another equal sign then, always good to know :D", "this one is sometimes used as a trick to check if it's null or undefined in one go", "This one is smart!", "wouldnt recommend it though\n that's a job for whatever build tool you may use", "I'm not very good so it's like a typescript lesson x)\n Though it's looks practical, I don't think I'll have to use it yeah\n Well, I will try === instead of == in my code and come back to you if anything goes wrong, thank you for your help!", "This works perfectly, includes was the solution! Thank you very much!"], ["is there a way to solve a conditional this in an interface having wrong types? ", "!title conditional this with interface", "interfaces are never conditional\n !hb discrim", "\u2060okay\n in that case the union isnt working", "hm?\na union does work", "here's a programmatically generated union\n", "can also do it manually by enumerating all possibilities\n btw not sure what the Message<true> & Message<boolean> does\n reads like it would just collapse to Message<true>", "i guess that makes sense\n thanks\n !close", "btw not guaranteed would be GuildConfig & { apiKey?: string }\n not just GuildConfig\n er\n unless apiKey is already ?: in GuildConfig i guess...\n yeah nvm\n !close"], ["a thing that can be one of two types (one of them being an array) is complaining it doesen't have array method concat because it could be the other type, but it only does concat in an \n if where I confirm it is an array with .isArray(). how to solve? (exact code in thread)", "this is the error\n should i check it has a concat method?", "Sometimes, TS is not smart with narrowing nested properties, try introducing a new variable: \n const { submenu } = providedMenuTemplate[injectablePosition] \n if (addAdditionalSubmenus && Array.isArray(submenu))  { ... }\n Array.isArray should be able to narrow because it has a type guard as return type", "\u2060something like this?\n or is the typeof redundant", "The typeof should be redundant", "yep cool\n thanks", "You're welcome", "will my ask slowmode reset from 25 minutes if i close this thread?\n or do i have to wait for another question regardless\n or should i just keep this open and rename the thread?\n cause p sure imma have another one soon lol", "I have no idea, maybe the people in \u2060ts-discussion would know.", "!title typescript not smart with nested properties", "!close"], ["Something is not working properly with my baseUrl option.\n It is working for one import and for other import I must specify full relative path", "My file structure:\nconfig fileIn Game.ts file I import 3 things\n First and 2nd are classes and last is interface\n When I run my program I get this error", "@milky way you need to set up path mapping yourself\n!:paths-are-not-magic", "Also, separating Game and IGame is an anti-pattern in TS: you should collocate your interface with your implementation\n And in that case, you would only have one file, mitigating the problem", "But why is it working for other 2 imports, not for the one  GameField ", "Are the other two used as values?\n Do they appear in the JS output", "No", "Yeah, that's why\n TS resolves it, so if it's only used as types, it's fine\n But Node doesn't resolve it, and it crashes at runtime ", "So you want me to remove I-classes and just write Classes? ", "Yeah, basically", "So that there are no Interfaces", "So that there are no Interfaces", "Rather, your interfaces are also in your class file.", "Or you want Interfaces to be but not in a separate file?\n Okay, thanks", "^ This", "!close"], ["Is there a way to make this work ?", "Follow up question \n https://www.typescriptlang.org/play#code/C4TwDgpgBAylC8UDeAoK6oDMD22BcUAzsAE4CWAdgOYA0aGARgIYkHHnV0C+KKAxtgrEiwAnESoMWXAQDkTWXSnNWUWQ0UoeKUJCgBpCCARqc2WVAA+albIDcvTAFcKfYGUFEIwGMCbAIAB59KAgADwCKABNCKABrI2xMWAA+AApiAgAFMj44wJgaAxSASmR6dAEhbAAbCAA6GuwqDOASrV464CgAd2BkiXqh4iLw0iY5WqnZHkJvX38INL7MMqgAenWoAHUAC2MKbFCSEmwSKF2IEggAfhQ5nz8AwNkzWUt1Fll0pCH6kdCERIEzUTRqMzKmygACEnN0rqdzpdrncgA", "the answer to your follow-up question is that typescript does excess property checks on object literals, but it's not a type error in general for values to have additional properties \n beyond what's needed to satisfy their types (because { a: string, b: string } is a subtype of { a: string })\n did you still need help with your initial question too?\n assuming yes, i think you might unfortunately have to use a type assertion:\n setState({[k]: 'ololo'} as Record<Key, string>)\n i don't know of a way to build an object with a dynamic key that is strictly typed", "i suppose the more accurate type for that is { foo: string } | { bar: string }, which isn't compatible with setState anyway, so maybe it's a good thing this is getting flagged. i'd \n have to see what the rest of your code is doing to know whether it's safe", "Thanks for the answer, I found a way to generate { foo: string } | { bar: string } type in typescript, but unfortunately it is not compatible.", "!close"], ["I want to create a Map of all subclasses of an abstract base class. Then later be able to use the map to get a particular subclass and create it's instance. But I'm not sure what should i \n keep for the values in the map.\n If I keep it as typeof BaseClass then it won't let me create new instances.", "!title type for collection of sub-classes", "@Li Qiye Your map can only contain constructible members, so it can only be new Map<string, typeof PingCommand | typeof GreetingCommand>", "But there can be many sub classes, will I need to add this for every sub class?\n Is there no other way?", "This also works", "Thanks! Just wanted for more knowledge, any drawbacks with this method?", "None that I'm aware of\n Except that you cannot access common static properties of BaseCommand\n (Which you have to manually merge onto the { new (): BaseCommand }", "got it, i think i can work around that. Appreciate the help.\n !close"], ["How can I solve when I am trying to access the price in product? Object is possibly 'undefined'.ts(2532)\n public products$ = this.http.get<Product[]>(this.productsUrl).pipe(\n map(products => \n products.map(\n product => ({\n ...product,\n  price : (product.price) * 2,\n searchKey : [product.productName]\n })\n )\n }),\n tap((data) => console.log('Products: ', JSON.stringify(data))),\n catchError(this.handleError)\n  )  A 'working' example would be helpful, it seems like this might depend a lot on the types of this.http.get and map and pipe.\n It doesn't look like product should be undefind there.  Unless the error is saying that product.price is potentially undefined?", "Yes, thats true because the price is defined as number | undefined in the product interface\n ", "In which case you'd probably have to do something like:\n price: product.price && product.price * 2\n Since you don't want to do undefined * 2 and get NaN.\n (Some people would likely prefer the more explicit product.price === undefined ? undefined : product.price * 2)", "Thank you, but is it possible to use the ternary operator inside the assignment of a value inside the JSON?", "!close"], ["I have a component with a text area and a handler,  I am successfully setting what the user types in this piece of internal state. I also have a button and I would like to get that text area\n value and put it in my context. \n This is what I am doing:\n const [data, setData] = useContext(DialogueContext)  where \n const DialogueContext = createContext<DialogType[]>({} as DialogType[])  and my type is\n export type DialogType = {\n  character: string \n   dialog: string \n } \n export default [\n   { character: 'Ben', dialog:  Foo  },\n ] as DialogType[] \n And I am trying to append more data to the context, by calling setData([...data, { character: 'Woody', dialog: text }])  or setData(data, { character: 'Foo', \n dialog: text }) .\n I get a  This expression is not callable . What am I doing wrong?", "@Chris Since you did createContext<DialogType[]> you're saying that the context just contains an array of DialogType object, and there's no setter.\n If you want your context to contain a setter function, you'd have to indicate that in the type and also pass it to the provider.", "Thank you, will give it a go now", "!close"], ["Hello there! Does anyone have the answer to this https://stackoverflow.com/questions/68925965/how-do-i-open-vscodes-extension-development-host-window question? I'm trying to \n make my own extension but I'm a little bit confused about how am I supposed to open the Extension Development Host window ", "If you're writing a VSCode extension, then I know the boilerplate that they give you has a debug configuration included.  You basically fire up the debugger, and it opens that window\n I won't be able to explain beyond that, but perhaps looking at vscode's extension development documentation will help", "Unfortunately when I fire up the debugger it asks which one to use and it doesn't automatically starts the new window", "!close"], ["Is it possible to create an object from a class omitting certain parameters similar to Python?\n I'm looking at this https://www.npmjs.com/package/cron package and it says that to construct a CronJob, you need to pass a few parameters (some which are optional, such as \n onComplete). Can I do something like new CronJob(cronTime, onTick, timezone= America/Toronto ) where I completely ignore onComplete or maybe even start? \n npm\n cron\n Cron jobs for your node. Latest version: 2.0.0, last published: 24\n days ago. Start using cron in your project by running `npm i cron`.\n There are 1635 other projects in the npm registry using cron.\n", "!title Optional parameter in a class constructor", "unfortunately not unless the package author planned for it. typescript/javascript don't have keyword arguments as a first-class language feature like python does \n looking at that package, there appears to be two overload singatures for CronJob's constructor: \n https://github.com/DefinitelyTyped/DefinitelyTyped/blob/2e6f3e603a01589534cb5f6197849a6bc8ca71dc/types/cron/index.d.ts#L89-L106\n you'll have to call it using one of those. you can pass undefined (or maybe null, based on the signature) for the arguments you want to skip over", "Oh I see\n For now, I just provide it () => {} for the onComplete\n and true/false for the start parameter to get to the timezone", "undefined should work too. that's the same value that the function itself would observe if you didn't pass that argument at all\n so if you want to be sure you're triggering exactly the same behavior as skipping over that argument, undefined is the safest bet. the constructor could have some funky typeof \n onComplete check or whatnot that changes behavior in other ways which you may or may not want", "Yea that makes sense, undefined is more readable anyway\n Thanks for clarifying", "!close"], ["Is there a better way to do this?", "!title Type for number ranges", "Nope\n Typescript doesn't have range types like that\n I wish it did", "I see....\n And is there a way that, given a const x: number = 2, to check if it would be a proper DayOfMonth?\n Maybe using as?", "aside from const x: DayOfMonth? Nope, not yet\n you can use a function\n function isDayOfMonth<T extends DayOfMonth>(x: T){ return x }\n const x: number = isDayOfMonth(2) \n to keep the literal type\n as doesn't constrain types, it overwrites whatever type the value currently has with another one", "Thanks\n !close", "!close"], ["hi! simple one here (i'm a newbie), can anyone tell me whe TS's complaining about Property 'reason' does not exist on type 'object'. being that i'm explicitly checking it?", "!title <Property does not exist on 'object' even when explicitly checking!>", "@Fico What's the type of error?  unknown?  The in operator can narrow, but pretty much only if error is a union.", "@Retsam19 thanks! yeah, im in a try catch block, so i could only use unknown and any. i used unknown\n this is the whole catch block:\n catch (error: unknown) {\n if (typeof error === 'string') {\n throw error \n } else if (typeof error === 'object' && error) {\n if ('reason' in error) {\n  const errorMessage = error.reason \n throw errorMessage \n }\n  } else {\n console.log('not a string', Object.entries(error)) \n  return \n  }\n  }", "If there's a specific error subtype you're narrowing to, you could do error instanceof SpecificErrorType, but yeah, in doesn't narrow that way on unknown.", "i think not\n ill switch to any thanks!", "(FWIW, throwing strings is also kind of frowned upon)", "what's the used pattern?", "i'm settling for strings, to replace a giant if at the bottom. There i sort things out, thought it could be cleaner to always send the actual error message", "Generally it's preferred to always throw error objects.\n In part because they contain a stack-trace that lets you figure out where they came from, and in part because it can be surprising when writing catch logic and you're expecting an\n object and get a string instead.", "thanks again!", "!close"], ["Hi everyone - please could someone show me the correct way to use Intl.ListFormat in TS? I'm using:\n const formatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' }) \n and getting:\n Unsafe assignment of an 'any' value.\n Unsafe construction of an any type value.", "I don't understand how formatter is described as both Intl.ListFormat and any\n", "@Jono Are you using the same TS version for your editor and TS-ESLint?\n It's possible that your TS-ESLint is linting with an outdated TS version where ListFormat is not present in the lib def\n Also possible that you are not using the same tsconfig, and the lib option does not include ListFormat\n Seems it's available as es2021, so make sure your tsconfig for TS-ESLint includes that", "thanks very much @Chen Sida - mismatching versions of TS seemed to be the issue, I upgraded my packages and that seemed to do the trick!\n thanks again, !close\n !close"], ["I am looking for help on how Typescript handles its typing resolution. I am having a  The inferred type of X cannot be named without a reference to Y . As referenced here: \n https://github.com/microsoft/TypeScript/issues/42873", "I'm not able to dig into this too deeply now, but I've run into this before. I don't think I came to a completely satisfactory understanding/solution, but I have some memory from that.\n For understanding, I found it helpful to just look at the .d.ts files involved. You'll see places where import() is used for types across packages (as opposed to relative imports).\n For practical solution, I believe I wound up just adding a transitive type dependency as a direct dependency somewhere.\n I could be remembering wrong and do not recall specific scenario, but perhaps these loose thoughts may be of use.", "I figured out the issue. Evidently Storybook made a mistake and referenced the types of the canary build of their @storybook/csf project \n https://www.npmjs.com/package/@storybook/csf\n npm@storybook/csf\n Storybook Component Story Format (CSF) utilities. Latest\n version: 0.0.1, last published: 3 years ago. Start using\n @storybook/csf in your project by running `npm i\n @storybook/csf`. There are 51 other projects in the npm registry\n using @storybook/csf.\n !close", "thanks very much @Chen Sida - mismatching versions of TS seemed to be the issue, I upgraded my packages and that seemed to do the trick!\n thanks again, !close\n !close"], ["Having an issue creating a light and dark mode theme handler. It works fine when running dev server but TS throws error \n TS2345: Argument of type ' dark ' is not assignable to parameter of type 'SetStateAction '\n  at the red underlines. Any help?", "@nakajimayoshi Where is your setTheme defined?", "above", "@nakajimayoshi Ah, you're not telling TS what goes in the theme state.\n To fix your current version you would do:\n useState< light  |  dark  | null>(null) \n You could also do:\n useState< light  |  dark >() \n which is essentially the same except with undefined.\n Or:\n useState< light  |  dark >( light )\n rather than waiting until the useEffect to initialize it.", "works brilliantly! Thank you! Why wrap the params in element tags rather than useState: args? I'm a bit new to TS so just trying to learn from this", "@nakajimayoshi By element tags, you mean < >, right?", "yeah", "Those are generic type parameters - they're part of a function's type signature and used to capture parts of its types.\n In most cases they're inferred, e.g. useState( foo ) is equivalent to useState<string>( foo ) - but in some cases you need to specify them manually.\n It's kind of deep topic but it's worth reading up on the basics:\n https://www.typescriptlang.org/docs/handbook/2/generics.html", "awesome, thanks again!\n !close"], ["hello i hope this question is valid.. Is it okay to leave the async keyword on a function that has no await inside it?", "@typescripting Yes", "You can, though you usually shouldn't.", "All that async does is that the returned value is automatically wrapped in a promise\n Which means, if you will potentially do async tasks in this function, your downstream users won't suddenly need to add an await", "On the other hand, in the mean-time you're making downstream consumers await for no reason.", "TBH, I'm less worried about extraneous await than floating promises :D\n And it depends on whether your code can semantically be async\n For example, if you have a function that imports an external JS file and it's currently using require, you can still mark it as async because you may use await import in the future", "thanks for fast response guys.. i got ask by my reviewer if we should keep the async on my tests.. we are using jest.\n it('title here', async() => {\n // this function dont have await\n }) \n is it okay with floating async?", "It's fine, IMO, but again, it depends on whether you'll ever need again\n My suggestion is to remove it, since it's relatively cheap to add it back at any time ", "got it guys thank you so much"], ["I'm running into some weird behavior where remapping the keys in a mapped type causes the values to not be deduced correctly", "You can see from hovering type B at the bottom of the playground that the values of the properties are maintained correctly (you should see [string, string, boolean, \n number]), but when I use an as to remap the keys, all the sudden every property gets a union type, instead of retaining its own specific type info (everyone is now string | boolean | \n number instead of staying specific)\n Even if you reduce the property type all the way down to F[K] it still just gives a union. Is there something subtle here that I'm missing, or did I stumble across a compiler bug?", "i haven't gotten to the bottom of it and have to go, but it has something to do with K ending up as  number |  the thing you want . you can see that in this reduced example: \n ", "which i guess means you can fix it by explicitly eliminating that via a strategic & string:", "That would've taken me forever to figure out, but I think I understand how it works thank you so much!\n !close"], ["Hey, I have a little questions, imagine I have an interface like \n interface original {\n a: string \n ...\n d?: string \n }\n Does it make sense to create a new interface just to use in the return type of a function to inform that it will always return d in that case, like:\n interface new extends original {\n d: string \n }", "I'm not sure what does make sense mean here\n ", "if its a good approach\n", "Or maybe just use a  Pick?\n I would say it should be the taste of the code", "its not that it will return just d, which is what PICK would do, I think. It essentially has all the properties of the original, except that d wont be optional.", "yup, maybe i didn't state it clear, but i mean there're lots of variants to achieve the same effects, e.g., original & { d: string }, the way you've mentioned should be a good \n approach.", "Cool, was just wondering, thanks!\n !close"], ["Hello, can somebody tell me please, how to describe the following:\n { 'categoryDetails.nameId': '1' }\n In an interface?", "@Renovatio Well that'd be:\n interface AnInterface {\n 'categoryDetails.nameId': string\n }\n ... unless you were trying to do this more generally and do all string paths of some object.", "@Retsam19 thanks for the message, sorry for not stating my problem clearly. The problem I am currently facing is related to mongodb. My interface provides the following pattern: \n categoryDetails: { nameId: string } and this is functional in all places except with mongo, because they want the format indicated previously. \n Now in what they want I can see a certain object property relation, but I just have no idea how to represent that in my interface"], ["How are you meant to read from a local file relatively", "the file never exists", "fs.readFile?", "im doing readFileSync\n Error: ENOENT: no such file or directory, open './gameManager.js'\n (got that error from a file called gameManager.js)", "are you trying to read a file that's part of your build?\n wait, are you trying to read the file it's in?", "well\n i was using that to test ", "fs's paths are relative to the cwd, are you accounting for that?", "in the image im about to send, id is  base \n this was just me testing loads of stuff", ".", "so its based on index.ts?", "it's based on the cwd", "which is...", "the directory from which you run the code from ", "so index", "that would be a file\n cwd stands for current working directory", "still doesnt work", "if you have this for example\n root\n  |- index.js\n |- util\n  |- gameManager.js\n and you run index from root, then the cwd is root and you need ./util/gameManager.js", "yes", "if you run node ../index from util, then you need ./gameManager.js", "!close"], ["Hey everyone! I'm still in the learning phase so this question is for those of you who have patience for newbees\n I have come across this error using typescript with react 'type  string  is not assignable to type  IntrinsicAttributes and Props . Type  string  is not assignable to type  props '", "this is the error", "You want <Word word={word}/>, there isn't shorthand for omitting the prop name", "Oh thank you so much!\n Really appreciate this!", "I believe TS was expecting you to spread word ({...word}), but since you didn't do that, you got an error. Note however, that even if you did spread word properly, there would still be \n a type error since word is of type string and not of type Props"], ["questions about typescript", "i wanna start learning typescript but i have a question\n Does typescript require a lot of learning or is it easy? and would it take a few days only if i have experience with JavaScript and node.js? ", "if you know js, then ts is very easy\n but advanced typescript is very difficult regardless of your js level ", "@Deleted User There was a bit of a discussion in \u2060ts-discussion a few hours ago.\n But it depends on a lot of things - it'll vary a lot depending on how many languages you know, and in particular how comfortable you are with static typing, as well as what you're going to\n do with Typescript.", "Alright thank you guys", "!close"], ["Hello, I'm having a hard time adding generics to a special kind of arrow function with the form of const someFunction<T> = (field: string) => (value: T) => {...}    <--- This \n is wrong\n What should be the syntax here?", "@Celien Are you creating a generic function? ", "I guess, yeah", "Do you mean\n const someFunction = <T>(field: string) => (value: T) => 1 \n ?\n Generics follow the parens, not the identifier", "Yeah, it's complaining about an unexpected token. Kinda baffles me", "It's because your original code was not valid syntax.", "I mean, I copied the snippet you wrote and it's still complaining that the syntax is incorrect ", "Is this a tsx file?\n const someFunction = <T,>(field: string) => (value: T) => 1 \n Try this?", "Yes it is\n Okay, it's now working with the comma", "May I ask why the comma is needed in this instance?", "Because otherwise there's parsing hazard with a JSX element", "const someFunction = <T>(field: string) => (value: T) => 1 </T>", "There's no ambiguity if we do a lookahead and confirm there's no closing tag, but the TS team decides that an infinite lookahead is not desirable for performance", "Okay, got it, thanks a ton for the help and the info!\n !close"], ["Is there any difference if I write: [key: string]: string or [index: string]: string in a type?", "no, you can use any name you want", "ty!  \n !close"], ["Hello, first off some background: \n 1. I am new to TS \n 2. I am trying to figure out how to set up a TS project (using Rollup) that includes javascript modules \n What is the correct way to include a CommonJS module in a TS-project? The CJS module file (showdown.js) is generated with grunt and has the content wrapped in an IIFE and exports some but not all relevant objects and definitions with module.exports. Notably I get  (!) Plugin typescript: @rollup/plugin-typescript TS9005: Declaration emit for this file requires using private name 'Converter'. An explicit type annotation may unblock declaration emit.  \n I would guess there should be a  propper  way to wrap the CJS-module in a TS-module and then use that? How do I set that up? \n Thanks! ", "!title <Beginner: How to wrap JS IIFE in TS> ", "@triaeiou More of a rollup question than a TS question.  Kind of sounds like a UMD module, and I would think rollup could handle those, but I'm not 100% sure \n It probably works better with 'raw' CJS or ESM.", "Ok, thanks, but regardless of Rollup (and Grunt) it would seem that wanting to use an IIFE  JS module in a TS project would be fairly common? If so I am guessing there is a  best practice  on how to do that?", "@triaeiou Not really?  Again, this sounds like the domain of bundlers.  \n The  best practice  is probably  use a bundler  and it sounds like that's what you're doing.", "Ok thanks, it feels like I'm missing something, I'll play around a little more, thanks."], ["Is there a way to get the none array type of an array, so basically the object? \n I got this for example \n const handleTagSelect = (tag: FilterTagsQuery['searchTags']) => { \n And FilterTagsQuery has following interface \n (alias) type FilterTagsQuery = { \n    __typename?:  Query  | undefined  \n    searchTags: Array<{ \n        __typename?: 'Tag'  \n        id: string  \n        name: string  \n        excerpt: string  \n         body: string \n     }>  \n } \n import FilterTagsQuery \n I thought maybe there is a way to use that interface without it being an array", "T[number]", "Should I just use[0] then? \n Looks weird somehow dunno \n const handleTagSelect = (tag: FilterTagsQuery['searchTags'][0]) => {"], ["Is it ok to use ts-node to run TS files in an interview, as opposed to using tsc?", "I think in general, for any interview, the interviewer will ask you questions about what you're doing, and you'll want to have reasonable answers to those questions. \nThis demonstrates that you are competent, collaborative, and able to communicate clearly \n That should drive the choices you make during the interview", "Thank you so much "], ["Goodmorning! How can I create an interface for 2 different possibile response shape, based on a property which can be either true or false. If it's true I'll have for example another key for token, but if it's false i'll have another key with errorMessage. To recap I have this kind of interface: \n interface Response {\n  response: boolean \n  errorMessage?: string \n  token?: string \n }\n How can I have better typing so that either those keys cannot be inferred as undefined based on response value?", "!title Interface with conditional typings", "you can use a discriminated union: \n see https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions \n type Response = { \n  response: true  \n  token: string  \n} | { \n  response: false  \n  errorMessage: string  \n }", "o simple, I'm just a newbie in this yet \n thank you so much for your answer \n !close"], ["why is ts not happy with this", "!title Adding property to object created with let", "This is not a known property of the type. You may want to add messageAttachments?: undefined to within the let value to let TypeScript know this is an optional property \nYou could also hand-write a type and add a type annotation", "yes \n tyvm \n !close"], ["Can someone help me with this error I am just confused why Record<string,any> can't take { }", "What does your code look like?", "thanks I actually solved it, as I was assigning {} when I had to cast it to the generic type T that I had in my code \n {} as T \n !close"], ["This is a little advanced... https://github.com/ajvincent/cross- stitch/blob/main/_02_TypeScript_TypeToClass/useCase.mts I'm running with @TypeScript-eslint/parser and have typescript available to me.  I'm trying to generate a stub class from an interface, and I'm realizing that the TypeScript compiler already has the information I need to extract (the keys of the type, and the signatures for each key).  So I'm wondering: how do I get that information? \n GitHub", "@WeirdAl You may try \u2060compiler-internals-and-api", "thanks - I'm reposting there.  !close"], ["Is there a way to tell TS that there are two optional args, one has to be given?", "Like, there's arg A, and arg B \n You must give A or B, but not both, and not none \n I can think of \n interface Y  \n interface X  \n Interface a { \n    args: (Y, X) \n }\n Is it good enough \n I wonder if there's a more ts-ish way", "!bread:exclusive-or", "I'll save this, but I guess I'll stick to mine at the moment, thanks lol"], ["just a small quip. Is there a more concise way of expressing this?", "!title concise form", "can you copy-paste the code", "const allIssuerIds = [\n              ...( \n                await this.prisma.user.findMany({\n                  select: { issuer: true },\n                })\n              ).map((u) => u.issuer),\n              ...(\n                await this.prisma.organizationFinance.findMany({\n                  select: { issuer: true },\n                })\n              ).map((o) => o.issuer),\n            ] ", "would help a lot to fiddle around with it", "you could shorten it further by looping over your  classes  (user and organizationFinance) and calling the findMany method on them and passing the same param ", "Thanks i settled for this:\nconst allIssuerIds = (\n              await Promise.all([\n                this.prisma.user.findMany({ select: { issuer: true } }),\n                this.prisma.organizationFinance.findMany({\n                  select: { issuer: true },\n                }),\n              ])\n            )\n              .flat()\n              .map(({ issuer }) => issuer) "], ["hello, what is the best approach to merge 2 arrays when either one of them can be possibly empty?", "there are a bunch of different ways", "I personally like the [...a, ...b] syntax best", "@Ascor thank you very much kind sir"], ["Hello, how do I define functions on my custom types? I'm imagining something like this: \n type Color = {\n    r: number \n    g: number \n    b: number \n    function toNumber(): number {\n        return r + g + b \n    }\n} \nso I want to be able to do this: ({ r: 5, g: 5, b: 5} as Color).toNumber()", "!title functions on types", "@Deleted User Types don't exist at runtime, so you can't have implementations on them. \n You would need to use a class instead", "ah ok", "thanks!"], ["Heya peeps, I got a little question. So I got a nestjs project and it has generated a .dist folder, now is this new for me and its screwing my project up, anyone got an idea on how to disable this?", "!title problem with dist folder in nest.js", "how is it screwing up your project?\nwhat's the error you're facing exactly?", "It already solved"], ["If I have the following interface and function \ninterface IParamFilterFormData {\n  isEnabled: boolean \n  createdAt: [Moment, Moment] \n}\nconst addSearchParam = (key: string, value: any) => {\n  searchParams.set(key, value) \n  setSearchParams(searchParams) \n} \nHow can I make it so that the addSearchParam value param accepts any type that is in the interface?", "const addSearchParam = <K extends keyof IParamFilterFormData>(key: K, value: IParamFilterFormData[K]) ?", "Nice! That worked. Thanks"], ["Is it possible to define the type of this on a function? I have a type like this: \ntype Foo = {prop: number  sideEffect: (arg0: string, arg: number) => void}\n and sideEffect has its this rebound before invoking it foo.sideEffect.call(anotherThis, \u2026).\nTypeScript is telling me that this is potentially undefined (but the actual underlying type is just wrong anyway) in my values of Foo.", "I discovered ThisType but can't seem to get it working. ", "Okay, made my way to the this parameter documentation!"], ["Hello, I'm having problems with tsc. It uses watch mode even if it is not enabled in my tsconfig.json \n More details in thread.", "When I execute tsc to compile my npm package it uses watch mode, but I didn't add any flags and tsconfig doesn't have any setting that tells him to do that \n The GitHub repository is this: https://github.com/Sadyn-Project/SunRodAPI \n Also, I published it on npm. On the actual stable version it runs the build script on the installation (which runs tsc) and gives no error, from the 1.3.12 version to the latest, npm does not run the build script anymore and if I try to run it alternatively it does but then it uses watch mode and the installation stops", "https://github.com/Sadyn-Project/SunRodAPI/blob/main/tsconfig.json#L8", "you did add the flag to your tsconfig, somehow", "Oh, didn't notice it \n Thanksss", "weird, since that option isn't listed in the tsconfig reference", "I was sure to do not have added it to my tsconfig, I should pay more attention", "oh, ok\n apparently  it changed with TS 3.8 \n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#better-directory-watching-on-linux-and-watchoptions", "Because a friend helped me to create the tsconfig, and I was trying to resolve this problem with him and we both didn't understand what the problem was", "when they added watchFile and watchDirectory and marked watch as deprecated", "He probably added it", "Oh thanks", "ye, could only have been the tsconfig, since it's basically the only way to provide option, other than the command line"], ["I'm using discord.js, and when I try to assign a message object returned from a .reply() function, I'm getting an error: Type 'APIMessage | Message<boolean>' is not assignable to type 'Message<boolean>'. \n let menu: Message \n if (!this.interaction) { \n    menu = await this.channel.send({ embeds: [this.currentPage.content], components: this.currentPage.actionRows }) \n} else { \n    menu = await this.interaction.reply({ embeds: [this.currentPage.content], components: this.currentPage.actionRows, fetchReply: true }) // Type 'APIMessage | Message<boolean>' is not assignable to type 'Message<boolean>' \n } \n However, if I define menu as let menu: Message | API Message, I get another error a few lines down when I try to call menu.createMessageComponentCollector(): \n this.collector = this.menu.createMessageComponentCollector({ filter, time: this.timeout, idle: this.idle }) // Property 'createMessageComponentCollector' does not exist on type 'Message<boolean> | APIMessage'. Property 'createMessageComponentCollector' does not exist on type 'APIMessage'. \nWhat can I do to fix this? ", "!title Discord.js Message vs APIMessage typing error", "What version of TypeScript and discord.js are you using?", "TypeScript 4.7.4, discord.js 13.8.1"], ["Hey all, suppose I have following snippet where a readonly HEADERS array is transformed into an object CSVRow, is there a way that I could make CSVRow generic, so that different types of header arrays could be passed to? \n const HEADERS = [ \n  'file', \n   'type' \n] as const  \n // what would be the best way to make this generic so that different headers could be passed to it? \n type ArrayValues<Array extends typeof HEADERS> = Array[number]  \n type CSVRow = Record<ArrayValues<typeof HEADERS>, string> ", "Thanks @Deleted User exactly what I was looking for! Do you have a recommendation where I can learn more about generics magic?", "uhm... not really \n the handbook should have most of the info you need \n !hb", "but honestly how to actually write generics mostly comes with experience imo", "Thanks a lot, highly appreciate your help"], ["Hello everyone i hope our all doing good i am work with typescript for a moment now and i got a project that i want to document. And I tried to put  typedoc  but i dont get the  entryPoints  system. Could i just ask the typedoc to put all the classe that are in different files under one module ? and if yes how ? Thanks you for answers", "!title TypeDoc problem", "You could make a file that exports each class, and then set that file as the entryPoint: \n export * from './class1' \n export * from './class2' \n // etc", "thanks for the tips it worked !"], ["icon?: { type: 'avatar'  name: string } | { type: 'icon'  icon: ReactNode }  \n {icon?.type === 'avatar' ? <NotificationAvatar name={icon.name} /> : icon?.icon} -> No error in editor \n Property 'icon' does not exist on type '{ type:  avatar   name: string  } | { type:  icon   icon: ReactNode  }'. \n   Property 'icon' does not exist on type '{ type:  avatar   name: string  }'.  TS2339 \n How is this possible?", "!title Discriminated union in ternary doesn't workk", "!title Discriminated union in ternary doesn't work", "!title Discriminated union in ternary doesn't work", "Can you reproduce the issue on the playground? Maybe starting with something like this: ", "The thing is that the Playground is 1:1 to what I have \n And my editor doesn't complain either, only when I compile I get that error \n Property 'icon' does not exist on type '{ type:  avatar   name: string  } | { type:  icon   icon: ReactNode  }'. \n  Property 'icon' does not exist on type '{ type:  avatar   name: string  }'.  TS2339 \n    23 |   <NotificationWrapper> \n    24 |     <NotificationIconWrapper variant={variant}> \n   > 25 |       {icon?.type === 'avatar' ? <NotificationAvatar name={icon.name} /> : icon?.icon} \n        |  \n   ^    26 |       {read && <NotificationIndicator />} \n     27 |     </NotificationIconWrapper> \n     28 |     <NotificationTitle variant={variant}> \n It's really weird \n I can do {icon?.type === 'avatar' ? <NotificationAvatar name={icon.name} /> : icon?.type === 'icon' && icon.icon} but that shouldn't be needed I think?", "My guess is that your editor is not set to use your project's Typescript compiler and uses its own \n That code works as long as you're using TypeScript 4.2+", "The editor is, the error is a compile error", "You use VSCode?", "Oh wait this project is using ts 4.1.5", "Yup.", "Ugh, ty", "I believe that problem happened at least once to everyone of us...", "Yea I should configure vscode to use this version", "While a .ts file is opened in your editor, just click the {} at the right side of the bottom bar of the VSCode window \n By hovering it, you'll see the version the editor is using... and then you can click  Select version  in the small popup \n No need to go in the settings or anything \n Just be sure it's set to  Use workspace's version  or similar. \n Good luck!"], ["Would there be any reason I need to test that the parameter given to a function is the correct type if I'm always using typescript?", "No, unless you're writing a library that would also be used from JavaScript, then it could be good to test parameters for the public API", "Thanks !close"], ["Is there a way to convert string literal type with only digits into number literal type? \n Aka something like Number.parseInt but at type-level: \n type StringToNumber<T extends string> = T extends /*magic goes here*/ ? /*number literal*/ : never", "@juh9870 In TS 4.8, you can do this: \n type StringToNumber<T extends string> = T extends `${infer S extends number}` ? S : never  \n But there's no trivial solution before 4.8", "Oh,thanks!", "Hmm, for some reason it returns number, not the number literal", "Are you using 4.8?", "Hmm, let me check \n Right, I have 4.7 \n ima try to update"], ["Hey folks!  \n I want to get an unordered/shuffeled type from array values. For example, I want to write test(['comments.ratings']) but it's impossible because only test(['user', 'comments.ratings']) is valid. I tried to add another type Writable to  remove  the  readonly  but I don't know why I need to write all the elements.", "you're trying to have test() accept an array of values specified in $with, just not in the same order? I think something like this would work, you can get the type of the values of $with then say that test accepts an array of them:", "If you don't care about capturing the generic in test, you can do it without as well:", "Many thanks, it works!!!"], ["I am looking for someone who can assist me or help me to create custom library for tracing on GCP similar to this one https://github.com/open-telemetry/opentelemetry-js/tree/43f4e5a332a551eebeed90f281dd1ab6a58cef87/experimental/packages/opentelemetry-sdk-node I was stuck on this for a bit and can't figure out how to do it. Would anyone be able to help me out ?", "!gcp-tracing need help creating custom library for enabling tracing in GCP \n !title need help creating custom library for enabling tracing in GCP", "If you've got a specific question to ask you may have more luck than a generic request for collaboration.", " thanks, I was actually looking for someone to help me out and collaborate together as I am stuck big time, probably as a paid gig", "We really don't do job gigs here, unfortunately.", "just trying my luck \ud83d\udc4d  thanks I will be more specific next time will try to figure out myself or maybe ask few others, appreciate the response"], ["I feel like I'm missing something obvious here, but how can I type the value parameter properly in this case?", "I realize I don't need typeof on line 46 but that still doesn't fix the issue :/", "!close"], ["Why does test not error here for being assigned to c? ", "Though it does work when I remove the { [key: string]: (x: number) => number } \n (I'm trying to make sure utilFuncs can only have string keys that map to (x: number) => number functions) \n Thank you in advance for any insight", "you\u2019ve explicitly said your utilFuncs is a record of any string \n If you just want to constrain the value type, but infer a narrower key type, use this: \n !:cif", "I see, sorta :discre3Hmm: though then why does it have string | number when I mouseover the type", "!rep"], ["Ok i was just reading the docs for 4.8 and had a question...\n How can we perform a value check in typescript since === will always return false", "The reason it returns false is that it's checking the array references, not the contents of the arrays", "Yes", "If you want to check the contents of the array are equal, you would need to compare each item", "Oh, there is not any inbuilt operator or function which does it for us?", "a.length === b.length && a.every((aItem. i) => aItem === b[i]) \n No there isn't", "Hmm ok and \n Does the code waits for .every to end? \n Or is it like .foreach , it does not waits", "the every will short circuit and stop if it finds a place where aItem === b[i] is false ", "Try it", "Oh intresting \n Thanks for the help guys \ud83d\udc4d \n !close thank you", "I believe the code does wait for all the callback in the .forEach to complete before stepping \n the problem you describe is only with async stuff"], ["Looking for some theory advice, what's the smartest way to send data through a Socket? \n My first thought is to send the data as a String and send/receive through UTF, then split that String into each line of data I want using some sort of marker character, probably an escape character of some kind, to indicate a new piece of information. \n This likely isn't anywhere near the best way to go about this, so what is the best way?", "depends on the data \n If you have different kind of data (ints, binary data, Strings, whatever), you could use DataOutputStream/DataInputStream. ", "That's currently what I'm doing. \n I would potentially be sending data of all 8 primitive types depending on the scenario.", "seems good", "My initial idea?", "using data streams for this", "Well obviously that. \n I guess my question is more on how to, for lack of a better word, format the data I'm sending. \n For example, if I'm sending a double, a character, and an int all at once, how should I figure out what is what on the server side? "], ["Hi, I was wondering if there was a way to correspond the type of a function's parameter to the type of its output. For example, If I had: const getResult = () => ({left: 0}) const getResultWDir = (dir: 'l' | 'r') => { const result = getResult() if (dir === 'l') { return result } else { return {right: result.left} } } would it be possible to construct getResultWDir such that if I had getResultWDir('r'), it would know I should receive an object of type {right: 0}?", "User overloading \n https://www.typescriptlang.org/play#code/JYOwLgpgTgZghgYwgAgDIRmAShAzgVwBsxkBvAKGWUIzAC5kR8BbAI2nIF9zzRJZEKLMADmAC2x4iJClSiiJDJmw7dyCAPYhcJEREkFiyALzIAFAEpkDdJhyGSxgHznSNTAwAMnCwG4eMPggCGDAWsh6YAAiwFD20mYAJrEMAOSEqVY2tPHE-oHBoeGRMXFSxEkpyKlQmdbIwuIG0vlBIWEgEfqluSSVUAwARISDyAA+yINQg1loOeUkE40SvWSUyJraJFALJl3NFRbrO2D4UJ3JUCbGpumpyAD8yDsO9aTPCvTPCwB07iScfxqTa4DQ0P4aERmEqxXpmO4WP60PzqLSg8GESHQ7qwhbw2qI+RNPxAA", "Thanks! Any chance there's a way to do this with constants?", "Not really https://github.com/microsoft/TypeScript/issues/47669", "Got it - thanks!", "!close"], ["why is ArrayList<String> bob = new ArrayList<>()  worse than ArrayList<String> bob = new ArrayList<String>() ", "it's not a matter of being better or worse than, it just can save you time \n also helps the code be more readable and safer \n because what if you accidentally put List<Float> list = new ArrayList<Double>() maybe? \n probably would never happen though, too extreme of an example ig", "no im trying to explain why ArrayList<String> bob = new ArrayList<>()  is bad \n can u give me a reason why it should be bad", "no I cannot, sorry", "then why does literally everyone put the second string", "mixed results https://github.com/search?q=List+%3D+new+ArrayList&type=code", "Who", "like online everything I can find has it", "I didnt search github tho", "I don't use it at all \n Java will already kind of cast it, \n So both are okay, use whichever you like", "Im complaining about a teacher and I need more things to complain about", "Okay then stop complaining", "No because I have 8/10 questions on a test to complain about", "Because", "but if I can complain about 10/10 thats worse \n yknow", "After a certain java update \n They made it so you don\u2019t have to declare the type of ArrayList anymore \n After the first declaration", "but that used to be necessary?", "ArrayList<String> list = new ArrayList<String>()  \n Used to be necessary", "gotchu ty", "Not anymore tho \n Np"], ["hi, i'm trying to make optional 'blocks' in a type. here's the playground in which i've written code (with 'tests') that i'd expect to work, but it doesn't... https://www.typescriptlang.org/play#code/JYOwLgpgTgZghgYwgAgEJwM4oN7IFDKHJwBcyIArgLYBG0A3HgL6N6iSyIoCiAHmMgj8IIACYY0mHASI0yGMFFABzRkWQIyNAPbaANhDghGTPHjABPAA49+6LMgC8khwB9kfMKzwB6H8gwAC20KPVFkOmQANzg9YFE8BG0QBQipAEEyT3sUZ2wZQlJkAEYAJgBmABpmVj8A4NDwyJi4hKSUgRopVCy7KSdkfPUigBYAVgA2avU5ZAAiAEcAdwg56aJNZHg9LGqWMzqgkLCIlFAW+MTk1K6sAGFi3rAcgaGiIoqx9cJZucxRNY1A7+I6NU7Ic6xS7tG5SO6lJ4vPIFYhkcbFb4aMiKCgQPaMIA", "typescript does not protect against excess properties but, you could convert these into discriminated unions to enforce it when they are literals", "ah, thank you", "https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions", "though is there really no way to do this without adding that discriminating type field?", "its the easiest option the issue with your example is that there is no property overlap at all and typescript will accept any type that satisfies your union", "ah, i'm guessing that's required to make it work like i want it to?", "the examples you want to be invalid, are all Base", "the happy path is discriminated unions", "thanks for the help & explanation!"], ["Anyone know why this is not writing anything to the file?", "Btw put String currSong inside loop", "Oh yea i forgot to reput it \n But it works for when the song.length is greater then 1 \n when songs.length is only 1 it doesnt", "?", "Like \n This works \n but this doesnt", "Where is songs? \n Instance variable?", "Print the exception then", "^", "It's just 1", "Print the exception \n In catch body", "yea \n It's literally  1 ", "Does it print anything", "What \n Show \n Code", "You didn't print the exception", "wrong one my fault", "Don't get message", "oh bet \n its java.lang.IndexOutOfBoundsException: 1", "Well \n Show playlist class's source code pls", "Show source of getSongAt also", "Oops \n Too long damn \ud83d\ude05", "yea i see the problem is at \n public Song getSongAt( int index ) { \n         if ( index < 0 || index >= count ) \n             throw new IndexOutOfBoundsException(    + index )  \n         return songs[ index ] \n     }", "Show count variable", "wdym? \n its just  \n  private int count ", "Where you initialized it \n I mean the constructor", "You never used count right", "hmm i think i found the problem", "Delete the count variable", "ight \n wait i switched songs.length with count and it seems to work", "Yeah"], ["Hey guy. I hope you are doing well. I am currently having trouble trying to modify the size of a custom Paper Slider component in React with TSX. I am wondering how this could be fixed as I have tried using sx height and width, py styling, and I am still a bit confused on why this is not expanding. Would really appreciate for help.", "!title SliderExplandHelp", "@PaniniPress Styling issues are difficult to debug based on screenshots. If you can make a demo (e.g. CodeSandbox) that reproduces it you might have more luck.", "Thanks for that @Retsam19. Was able to solve the issues with tinkering with the css sizing with the Carousel component.", "!close"], ["How can I make an array type in which the first element is always present and is of 1 specific type and then the rest of the elements (can be anywhere from 0 to infinite) are a different type?", "@Rodry type Tuple = [string, ...number]", "Did you test that? I believe I tried that and it told me that I needed an array type to spread it", "@Rodry Oops, yeah, [string, ...number[]] is the correct syntax.", "tysm!", "!close"], ["I have trouble to understand the docs of ScheduledExecutorService \n when i call .shutdown() will this shutdown the executor and all Runnables that are registered via .scheduleAtFixedRate() will no longer be  executed at that rate? \n But if a task is currently running it will not intercept it. Or will this just prevent me from registering new Runnables via scheduleAtFixedRate() and i have to do shutdownNow()", "Maybe someone can clarify", "d ScheduledExecutorService#scheduleAtFixedRate", "from this javadoc, you can see that if you shutdown the executor via shutdown(), a fixed rate task will be cancelled because: \n The executor terminates, also resulting in task cancellation.", "Ahhh okay ty >-<"]], "role": [[0, 1, 0], [0, 1, 0], [0, 1, 1, 1], [0, 1, 0], [0, 1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0, 1, 1], [0, 1, 0], [0, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0], [0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 1, 1], [0, 0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0], [0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0], [0, 1, 0, 0], [0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0, 1, 0], [0, 1, 1], [0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0], [0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0], [0, 1, 0], [0, 1, 1, 0], [0, 1, 0], [0], [0, 1, 0], [0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 1], [0, 1, 1], [0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0], [0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0], [0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0], [0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0]], "edge": [[[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [2, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [0, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[1, 2], [3, 4], [3, 5]], [[1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2]], [[1, 2], [2, 3]], [[0, 1], [1, 3], [2, 3]], [[0, 2], [1, 2], [4, 5], [5, 6], [5, 7], [7, 8]], [[0, 2], [1, 2], [2, 3]], [[1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [2, 4], [3, 5]], [[0, 2], [1, 2], [2, 3]], [[0, 1], [1, 2]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2]], [[0, 2], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 2], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [5, 7], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], [[0, 1], [1, 2]], [[0, 2], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [4, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12]], [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]], [[0, 1], [1, 2]], [[1, 2], [2, 3], [3, 4], [4, 5]], [], [[0, 1], [1, 2]], [[1, 2], [2, 3]], [[1, 2], [2, 3]], [[0, 1], [1, 2]], [[0, 1], [1, 2]], [], [[1, 2], [2, 3], [3, 4]], [], [[1, 2], [2, 3]], [[1, 2], [2, 3]], [[0, 1], [1, 2]], [], [[1, 2], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [11, 12]], [[1, 2], [2, 3]], [[1, 2], [3, 4]], [[1, 2], [2, 3]], [[3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]], [[0, 1], [1, 2]], [[0, 1], [1, 3], [3, 4], [4, 5]], [[0, 1], [0, 2], [2, 3]], [[1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1]], [[1, 2], [2, 3], [2, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [6, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [4, 6], [6, 7], [6, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [4, 6], [4, 7], [7, 8], [8, 9], [9, 10], [10, 11], [10, 12], [10, 13], [10, 14], [14, 15], [15, 16], [16, 17], [17, 18], [17, 19], [17, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [24, 26], [26, 27], [27, 28], [28, 29], [29, 30]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[1, 2], [1, 3], [3, 4]]], "label": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}